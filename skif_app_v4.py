# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form_v4.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



ADC_FRAME_START = 0 # Начальный фрейм для анализа данных (можно начинать анализ с середины файла)
ADC_FRAME_NUMBER = 1800 # Кол-во двухсекундных фреймов (интервалов) в одном файле данных

ADC_FRAME_COUNT = 1800

from PyQt5 import QtCore, QtGui, QtWidgets
from datetime import datetime
import adc_parse, diag_parse, sd_data_process

adcTime = 0
diagTime = 0
sdReadTime = 0

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(656, 448)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.adcButton = QtWidgets.QPushButton(self.centralwidget)
        self.adcButton.setGeometry(QtCore.QRect(40, 110, 80, 24))
        self.adcButton.setObjectName("adcButton")
        self.diagButton = QtWidgets.QPushButton(self.centralwidget)
        self.diagButton.setGeometry(QtCore.QRect(40, 150, 111, 24))
        self.diagButton.setObjectName("diagButton")
        self.conLabel = QtWidgets.QLabel(self.centralwidget)
        self.conLabel.setGeometry(QtCore.QRect(290, 50, 91, 16))
        self.conLabel.setObjectName("conLabel")
        self.adcLabel = QtWidgets.QLabel(self.centralwidget)
        self.adcLabel.setGeometry(QtCore.QRect(190, 110, 91, 16))
        self.adcLabel.setObjectName("adcLabel")
        self.diagLabel = QtWidgets.QLabel(self.centralwidget)
        self.diagLabel.setGeometry(QtCore.QRect(190, 150, 91, 16))
        self.diagLabel.setObjectName("diagLabel")
        self.readLabel = QtWidgets.QLabel(self.centralwidget)
        self.readLabel.setGeometry(QtCore.QRect(190, 190, 91, 16))
        self.readLabel.setText("")
        self.readLabel.setObjectName("readLabel")
        self.timeHeadLabel = QtWidgets.QLabel(self.centralwidget)
        self.timeHeadLabel.setGeometry(QtCore.QRect(310, 80, 81, 16))
        self.timeHeadLabel.setObjectName("timeHeadLabel")
        self.adcTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.adcTimeLabel.setGeometry(QtCore.QRect(290, 110, 80, 16))
        self.adcTimeLabel.setObjectName("adcTimeLabel")
        self.diagTimeLabel = QtWidgets.QLabel(self.centralwidget)
        self.diagTimeLabel.setGeometry(QtCore.QRect(290, 150, 80, 16))
        self.diagTimeLabel.setObjectName("diagTimeLabel")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(40, 50, 160, 24))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.connectButton = QtWidgets.QPushButton(self.splitter)
        self.connectButton.setObjectName("connectButton")
        self.disconnectButton = QtWidgets.QPushButton(self.splitter)
        self.disconnectButton.setObjectName("disconnectButton")
        self.consoleTextBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.consoleTextBrowser.setGeometry(QtCore.QRect(50, 190, 481, 192))
        self.consoleTextBrowser.setStyleSheet("font: 10pt \"Meiryo UI\";\n")
        self.consoleTextBrowser.setObjectName("consoleTextBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 656, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.conBtnClicked()    # Обработчик кнопки для подключения (реализовано будет в будущем)
        self.discBtnClicked()   # Обработчик кнопки для отключения (реализовано будет в будущем)
        self.adcClicked()       # Обработчик кнопки для обработки данных с АЦП (запускает срипт из adc_parse.py)
        self.diagClicked()   

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.adcButton.setText(_translate("MainWindow", "ADC Parse"))
        self.diagButton.setText(_translate("MainWindow", "Diagnostics Parse"))
        self.conLabel.setText(_translate("MainWindow", "Disconnected"))
        self.adcLabel.setText(_translate("MainWindow", "Not Parsed"))
        self.diagLabel.setText(_translate("MainWindow", "Not Parsed"))
        self.timeHeadLabel.setText(_translate("MainWindow", "Elapsed time"))
        self.adcTimeLabel.setText(_translate("MainWindow", "0"))
        self.diagTimeLabel.setText(_translate("MainWindow", "0"))
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.disconnectButton.setText(_translate("MainWindow", "Disconnect"))

    def conBtnClicked(self):
        self.connectButton.clicked.connect(self.connect)

    def discBtnClicked(self):
        self.disconnectButton.clicked.connect(self.disconnect)

    def adcClicked(self):
        print("1")
        self.adcButton.clicked.connect(self.adcMain)

    def diagClicked(self):
        print("2")
        self.diagButton.clicked.connect(self.diagMain)
        self.diagLabel.setText("Parsed")

    
    def connect(self):
        #Сейчас не реализованно
        #В скором времени будет устанваливать соедниение по ТСР связи для получения данных с gsm модема
        self.conLabel.setText("Connected")
        date_time = datetime.now()
        str_date_time = date_time.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.setPlainText(f"{str_date_time}: Connected\n")
    
    def disconnect(self):
        #Сейчас не реализованно
        #В скором времени будет разрвать соедниение с gsm модемом
        self.conLabel.setText("Disconnected")
        date_time = datetime.now()
        str_date_time = date_time.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.insertPlainText(f"{str_date_time}: Disconnected\n")
        self.consoleTextBrowser.moveCursor(mode="start")
    
    def adcMain(self): # Вызывает основную функцию adc_parse.py
        data = [
	        [], [], []
        ]
        timeStart = datetime.now()
        strTimeStart = timeStart.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.insertPlainText(f"{strTimeStart}: ADC Parsing Started\n")
        data, adcTime = adc_parse.main(ADC_FRAME_START, ADC_FRAME_NUMBER)
        self.adcLabel.setText("Parsed")
        timeEnd = datetime.now()
        strTimeEnd = timeEnd.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.insertPlainText(f"{strTimeEnd}: ADC Parsing Ended\n")
        self.adcTimeLabel.setText(str(adcTime))

    def diagMain(self): # Вызывает основную функцию diag_parse.py
        diag_frame_descr = {
		'frame_time': [],
		'inp_voltage': [],
		'hum_int': [],
		'temp_int': [],
		'hum_ext': [],
		'temp_ext': [],
		'crc_file': [],
		'crc_calc': [],
	}
        timeStart = datetime.now()
        strTimeStart = timeStart.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.insertPlainText(f"{strTimeStart}: Diagnostics Parsing Started\n")
        diag_frame_descr, diagTime = diag_parse.main(ADC_FRAME_COUNT)
        self.diagTimeLabel.setText(str(diagTime))
        timeEnd = datetime.now()
        strTimeEnd = timeEnd.strftime("%D%M%Y %H:%M:%S")
        self.consoleTextBrowser.insertPlainText(f"{strTimeEnd}: Diagnostics Parsing Ended\n")

    def sdRead(self): # Вызывает основную функцию sd_data_process.py
        sdReadTime = sd_data_process.func()
        self.readTimeLabel.setText(str(sdReadTime))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
